export declare const EnvironmentPermission: {
    /**
     * No permissions.
     */
    readonly None: "none";
    /**
     * Permission to read environment definition only.
     */
    readonly Read: "read";
    /**
     * Permission to open and read the environment.
     */
    readonly Open: "open";
    /**
     * Permission to open, read and update the environment.
     */
    readonly Write: "write";
    /**
     * Permission for all operations on the environment.
     */
    readonly Admin: "admin";
};
export type EnvironmentPermission = (typeof EnvironmentPermission)[keyof typeof EnvironmentPermission];
export declare const PulumiOperation: {
    /**
     * Analogous to `pulumi up` command.
     */
    readonly Update: "update";
    /**
     * Analogous to `pulumi preview` command.
     */
    readonly Preview: "preview";
    /**
     * Analogous to `pulumi refresh` command.
     */
    readonly Refresh: "refresh";
    /**
     * Analogous to `pulumi destroy` command.
     */
    readonly Destroy: "destroy";
};
export type PulumiOperation = (typeof PulumiOperation)[keyof typeof PulumiOperation];
export declare const TeamStackPermissionScope: {
    /**
     * Grants read permissions to stack.
     */
    readonly Read: 101;
    /**
     * Grants edit permissions to stack.
     */
    readonly Edit: 102;
    /**
     * Grants admin permissions to stack.
     */
    readonly Admin: 103;
};
export type TeamStackPermissionScope = (typeof TeamStackPermissionScope)[keyof typeof TeamStackPermissionScope];
export declare const WebhookFilters: {
    /**
     * Trigger a webhook when a stack is created. Only valid for org webhooks.
     */
    readonly StackCreated: "stack_created";
    /**
     * Trigger a webhook when a stack is deleted. Only valid for org webhooks.
     */
    readonly StackDeleted: "stack_deleted";
    /**
     * Trigger a webhook when a stack update succeeds.
     */
    readonly UpdateSucceeded: "update_succeeded";
    /**
     * Trigger a webhook when a stack update fails.
     */
    readonly UpdateFailed: "update_failed";
    /**
     * Trigger a webhook when a stack preview succeeds.
     */
    readonly PreviewSucceeded: "preview_succeeded";
    /**
     * Trigger a webhook when a stack preview fails.
     */
    readonly PreviewFailed: "preview_failed";
    /**
     * Trigger a webhook when a stack destroy succeeds.
     */
    readonly DestroySucceeded: "destroy_succeeded";
    /**
     * Trigger a webhook when a stack destroy fails.
     */
    readonly DestroyFailed: "destroy_failed";
    /**
     * Trigger a webhook when a stack refresh succeeds.
     */
    readonly RefreshSucceeded: "refresh_succeeded";
    /**
     * Trigger a webhook when a stack refresh fails.
     */
    readonly RefreshFailed: "refresh_failed";
    /**
     * Trigger a webhook when a deployment is queued.
     */
    readonly DeploymentQueued: "deployment_queued";
    /**
     * Trigger a webhook when a deployment starts running.
     */
    readonly DeploymentStarted: "deployment_started";
    /**
     * Trigger a webhook when a deployment succeeds.
     */
    readonly DeploymentSucceeded: "deployment_succeeded";
    /**
     * Trigger a webhook when a deployment fails.
     */
    readonly DeploymentFailed: "deployment_failed";
    /**
     * Trigger a webhook when drift is detected.
     */
    readonly DriftDetected: "drift_detected";
    /**
     * Trigger a webhook when a drift detection run succeeds, regardless of whether drift is detected.
     */
    readonly DriftDetectionSucceeded: "drift_detection_succeeded";
    /**
     * Trigger a webhook when a drift detection run fails.
     */
    readonly DriftDetectionFailed: "drift_detection_failed";
    /**
     * Trigger a webhook when a drift remediation run succeeds.
     */
    readonly DriftRemediationSucceeded: "drift_remediation_succeeded";
    /**
     * Trigger a webhook when a drift remediation run fails.
     */
    readonly DriftRemediationFailed: "drift_remediation_failed";
};
export type WebhookFilters = (typeof WebhookFilters)[keyof typeof WebhookFilters];
export declare const WebhookFormat: {
    /**
     * The default webhook format.
     */
    readonly Raw: "raw";
    /**
     * Messages formatted for consumption by Slack incoming webhooks.
     */
    readonly Slack: "slack";
    /**
     * Initiate deployments on a stack from a Pulumi Cloud webhook.
     */
    readonly PulumiDeployments: "pulumi_deployments";
    /**
     * Messages formatted for consumption by Microsoft Teams incoming webhooks.
     */
    readonly MicrosoftTeams: "ms_teams";
};
export type WebhookFormat = (typeof WebhookFormat)[keyof typeof WebhookFormat];
