"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Webhook = exports.TtlSchedule = exports.TeamStackPermission = exports.TeamEnvironmentPermission = exports.TeamAccessToken = exports.Team = exports.StackTag = exports.Stack = exports.Provider = exports.OrgAccessToken = exports.EnvironmentVersionTag = exports.Environment = exports.DriftSchedule = exports.DeploymentSettings = exports.DeploymentSchedule = exports.AgentPool = exports.AccessToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccessToken = null;
utilities.lazyLoad(exports, ["AccessToken"], () => require("./accessToken"));
exports.AgentPool = null;
utilities.lazyLoad(exports, ["AgentPool"], () => require("./agentPool"));
exports.DeploymentSchedule = null;
utilities.lazyLoad(exports, ["DeploymentSchedule"], () => require("./deploymentSchedule"));
exports.DeploymentSettings = null;
utilities.lazyLoad(exports, ["DeploymentSettings"], () => require("./deploymentSettings"));
exports.DriftSchedule = null;
utilities.lazyLoad(exports, ["DriftSchedule"], () => require("./driftSchedule"));
exports.Environment = null;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));
exports.EnvironmentVersionTag = null;
utilities.lazyLoad(exports, ["EnvironmentVersionTag"], () => require("./environmentVersionTag"));
exports.OrgAccessToken = null;
utilities.lazyLoad(exports, ["OrgAccessToken"], () => require("./orgAccessToken"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Stack = null;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));
exports.StackTag = null;
utilities.lazyLoad(exports, ["StackTag"], () => require("./stackTag"));
exports.Team = null;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));
exports.TeamAccessToken = null;
utilities.lazyLoad(exports, ["TeamAccessToken"], () => require("./teamAccessToken"));
exports.TeamEnvironmentPermission = null;
utilities.lazyLoad(exports, ["TeamEnvironmentPermission"], () => require("./teamEnvironmentPermission"));
exports.TeamStackPermission = null;
utilities.lazyLoad(exports, ["TeamStackPermission"], () => require("./teamStackPermission"));
exports.TtlSchedule = null;
utilities.lazyLoad(exports, ["TtlSchedule"], () => require("./ttlSchedule"));
exports.Webhook = null;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));
// Export enums:
__exportStar(require("./types/enums"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "pulumiservice:index:AccessToken":
                return new exports.AccessToken(name, undefined, { urn });
            case "pulumiservice:index:AgentPool":
                return new exports.AgentPool(name, undefined, { urn });
            case "pulumiservice:index:DeploymentSchedule":
                return new exports.DeploymentSchedule(name, undefined, { urn });
            case "pulumiservice:index:DeploymentSettings":
                return new exports.DeploymentSettings(name, undefined, { urn });
            case "pulumiservice:index:DriftSchedule":
                return new exports.DriftSchedule(name, undefined, { urn });
            case "pulumiservice:index:Environment":
                return new exports.Environment(name, undefined, { urn });
            case "pulumiservice:index:EnvironmentVersionTag":
                return new exports.EnvironmentVersionTag(name, undefined, { urn });
            case "pulumiservice:index:OrgAccessToken":
                return new exports.OrgAccessToken(name, undefined, { urn });
            case "pulumiservice:index:Stack":
                return new exports.Stack(name, undefined, { urn });
            case "pulumiservice:index:StackTag":
                return new exports.StackTag(name, undefined, { urn });
            case "pulumiservice:index:Team":
                return new exports.Team(name, undefined, { urn });
            case "pulumiservice:index:TeamAccessToken":
                return new exports.TeamAccessToken(name, undefined, { urn });
            case "pulumiservice:index:TeamEnvironmentPermission":
                return new exports.TeamEnvironmentPermission(name, undefined, { urn });
            case "pulumiservice:index:TeamStackPermission":
                return new exports.TeamStackPermission(name, undefined, { urn });
            case "pulumiservice:index:TtlSchedule":
                return new exports.TtlSchedule(name, undefined, { urn });
            case "pulumiservice:index:Webhook":
                return new exports.Webhook(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pulumiservice", "index", _module);
pulumi.runtime.registerResourcePackage("pulumiservice", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:pulumiservice") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map