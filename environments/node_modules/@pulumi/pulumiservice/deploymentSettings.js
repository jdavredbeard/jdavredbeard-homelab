"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const inputs = require("./types/input");
const utilities = require("./utilities");
/**
 * Deployment settings configure Pulumi Deployments for a stack.
 *
 * ### Import
 *
 * Deployment settings can be imported using the `id`, which for deployment settings is `{org}/{project}/{stack}` e.g.,
 *
 * ```sh
 *  $ pulumi import pulumiservice:index:DeploymentSettings my_settings my-org/my-project/my-stack
 * ```
 */
class DeploymentSettings extends pulumi.CustomResource {
    /**
     * Get an existing DeploymentSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new DeploymentSettings(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DeploymentSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeploymentSettings.__pulumiType;
    }
    /**
     * Create a DeploymentSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.sourceContext === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceContext'");
            }
            if ((!args || args.stack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stack'");
            }
            resourceInputs["agentPoolId"] = args ? args.agentPoolId : undefined;
            resourceInputs["executorContext"] = args ? args.executorContext : undefined;
            resourceInputs["github"] = args ? (args.github ? pulumi.output(args.github).apply(inputs.deploymentSettingsGithubArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["operationContext"] = args ? args.operationContext : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["sourceContext"] = args ? args.sourceContext : undefined;
            resourceInputs["stack"] = args ? args.stack : undefined;
        }
        else {
            resourceInputs["agentPoolId"] = undefined /*out*/;
            resourceInputs["executorContext"] = undefined /*out*/;
            resourceInputs["github"] = undefined /*out*/;
            resourceInputs["operationContext"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["project"] = undefined /*out*/;
            resourceInputs["sourceContext"] = undefined /*out*/;
            resourceInputs["stack"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeploymentSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DeploymentSettings = DeploymentSettings;
/** @internal */
DeploymentSettings.__pulumiType = 'pulumiservice:index:DeploymentSettings';
//# sourceMappingURL=deploymentSettings.js.map